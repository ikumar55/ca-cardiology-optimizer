#!/usr/bin/env python3
"""
California Travel Matrix Builder

Generates realistic travel time matrix for California cardiology providers
using distance-based calculations and California geography knowledge.
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Tuple

import numpy as np
import pandas as pd

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CaliforniaTravelMatrixBuilder:
    """Build travel time matrix for California providers and demand areas."""
    
    def __init__(self):
        # California ZIP code coordinates (approximate centroids for major areas)
        self.california_coordinates = {
            # Los Angeles area
            '90001': (34.0522, -118.2437), '90002': (34.0522, -118.2437), '90003': (34.0522, -118.2437),
            '90004': (34.0766, -118.3025), '90005': (34.0766, -118.3025), '90006': (34.0522, -118.2437),
            '90007': (34.0522, -118.2437), '90008': (34.0522, -118.2437), '90009': (34.0522, -118.2437),
            '90010': (34.0522, -118.2437), '90011': (34.0522, -118.2437), '90012': (34.0522, -118.2437),
            '90013': (34.0522, -118.2437), '90014': (34.0522, -118.2437), '90015': (34.0522, -118.2437),
            '90016': (34.0522, -118.2437), '90017': (34.0522, -118.2437), '90018': (34.0522, -118.2437),
            '90019': (34.0522, -118.2437), '90020': (34.0522, -118.2437), '90021': (34.0522, -118.2437),
            '90022': (34.0522, -118.2437), '90023': (34.0522, -118.2437), '90024': (34.0766, -118.3025),
            '90025': (34.0522, -118.2437), '90026': (34.0522, -118.2437), '90027': (34.0522, -118.2437),
            '90028': (34.0522, -118.2437), '90029': (34.0522, -118.2437), '90030': (34.0522, -118.2437),
            '90031': (34.0522, -118.2437), '90032': (34.0522, -118.2437), '90033': (34.0522, -118.2437),
            '90034': (34.0522, -118.2437), '90035': (34.0522, -118.2437), '90036': (34.0522, -118.2437),
            '90037': (34.0522, -118.2437), '90038': (34.0522, -118.2437), '90039': (34.0522, -118.2437),
            '90040': (34.0522, -118.2437), '90041': (34.0522, -118.2437), '90042': (34.0522, -118.2437),
            '90043': (34.0522, -118.2437), '90044': (34.0522, -118.2437), '90045': (34.0522, -118.2437),
            '90046': (34.0522, -118.2437), '90047': (34.0522, -118.2437), '90048': (34.0522, -118.2437),
            '90049': (34.0522, -118.2437), '90050': (34.0522, -118.2437), '90051': (34.0522, -118.2437),
            '90052': (34.0522, -118.2437), '90053': (34.0522, -118.2437), '90054': (34.0522, -118.2437),
            '90055': (34.0522, -118.2437), '90056': (34.0522, -118.2437), '90057': (34.0522, -118.2437),
            '90058': (34.0522, -118.2437), '90059': (34.0522, -118.2437), '90060': (34.0522, -118.2437),
            '90061': (34.0522, -118.2437), '90062': (34.0522, -118.2437), '90063': (34.0522, -118.2437),
            '90064': (34.0522, -118.2437), '90065': (34.0522, -118.2437), '90066': (34.0522, -118.2437),
            '90067': (34.0522, -118.2437), '90068': (34.0522, -118.2437), '90069': (34.0522, -118.2437),
            '90070': (34.0522, -118.2437), '90071': (34.0522, -118.2437), '90072': (34.0522, -118.2437),
            '90073': (34.0522, -118.2437), '90074': (34.0522, -118.2437), '90075': (34.0522, -118.2437),
            '90076': (34.0522, -118.2437), '90077': (34.0522, -118.2437), '90078': (34.0522, -118.2437),
            '90079': (34.0522, -118.2437), '90080': (34.0522, -118.2437), '90081': (34.0522, -118.2437),
            '90082': (34.0522, -118.2437), '90083': (34.0522, -118.2437), '90084': (34.0522, -118.2437),
            '90085': (34.0522, -118.2437), '90086': (34.0522, -118.2437), '90087': (34.0522, -118.2437),
            '90088': (34.0522, -118.2437), '90089': (34.0522, -118.2437), '90090': (34.0522, -118.2437),
            '90091': (34.0522, -118.2437), '90092': (34.0522, -118.2437), '90093': (34.0522, -118.2437),
            '90094': (34.0522, -118.2437), '90095': (34.0522, -118.2437), '90096': (34.0522, -118.2437),
            '90097': (34.0522, -118.2437), '90098': (34.0522, -118.2437), '90099': (34.0522, -118.2437),
            
            # San Francisco Bay Area
            '94010': (37.7749, -122.4194), '94011': (37.7749, -122.4194), '94012': (37.7749, -122.4194),
            '94013': (37.7749, -122.4194), '94014': (37.7749, -122.4194), '94015': (37.7749, -122.4194),
            '94016': (37.7749, -122.4194), '94017': (37.7749, -122.4194), '94018': (37.7749, -122.4194),
            '94019': (37.7749, -122.4194), '94020': (37.7749, -122.4194), '94021': (37.7749, -122.4194),
            '94022': (37.7749, -122.4194), '94023': (37.7749, -122.4194), '94024': (37.7749, -122.4194),
            '94025': (37.7749, -122.4194), '94026': (37.7749, -122.4194), '94027': (37.7749, -122.4194),
            '94028': (37.7749, -122.4194), '94029': (37.7749, -122.4194), '94030': (37.7749, -122.4194),
            '94031': (37.7749, -122.4194), '94032': (37.7749, -122.4194), '94033': (37.7749, -122.4194),
            '94034': (37.7749, -122.4194), '94035': (37.7749, -122.4194), '94036': (37.7749, -122.4194),
            '94037': (37.7749, -122.4194), '94038': (37.7749, -122.4194), '94039': (37.7749, -122.4194),
            '94040': (37.7749, -122.4194), '94041': (37.7749, -122.4194), '94042': (37.7749, -122.4194),
            '94043': (37.7749, -122.4194), '94044': (37.7749, -122.4194), '94045': (37.7749, -122.4194),
            '94046': (37.7749, -122.4194), '94047': (37.7749, -122.4194), '94048': (37.7749, -122.4194),
            '94049': (37.7749, -122.4194), '94050': (37.7749, -122.4194), '94051': (37.7749, -122.4194),
            '94052': (37.7749, -122.4194), '94053': (37.7749, -122.4194), '94054': (37.7749, -122.4194),
            '94055': (37.7749, -122.4194), '94056': (37.7749, -122.4194), '94057': (37.7749, -122.4194),
            '94058': (37.7749, -122.4194), '94059': (37.7749, -122.4194), '94060': (37.7749, -122.4194),
            '94061': (37.7749, -122.4194), '94062': (37.7749, -122.4194), '94063': (37.7749, -122.4194),
            '94064': (37.7749, -122.4194), '94065': (37.7749, -122.4194), '94066': (37.7749, -122.4194),
            '94067': (37.7749, -122.4194), '94068': (37.7749, -122.4194), '94069': (37.7749, -122.4194),
            '94070': (37.7749, -122.4194), '94071': (37.7749, -122.4194), '94072': (37.7749, -122.4194),
            '94073': (37.7749, -122.4194), '94074': (37.7749, -122.4194), '94075': (37.7749, -122.4194),
            '94076': (37.7749, -122.4194), '94077': (37.7749, -122.4194), '94078': (37.7749, -122.4194),
            '94079': (37.7749, -122.4194), '94080': (37.7749, -122.4194), '94081': (37.7749, -122.4194),
            '94082': (37.7749, -122.4194), '94083': (37.7749, -122.4194), '94084': (37.7749, -122.4194),
            '94085': (37.7749, -122.4194), '94086': (37.7749, -122.4194), '94087': (37.7749, -122.4194),
            '94088': (37.7749, -122.4194), '94089': (37.7749, -122.4194), '94090': (37.7749, -122.4194),
            '94091': (37.7749, -122.4194), '94092': (37.7749, -122.4194), '94093': (37.7749, -122.4194),
            '94094': (37.7749, -122.4194), '94095': (37.7749, -122.4194), '94096': (37.7749, -122.4194),
            '94097': (37.7749, -122.4194), '94098': (37.7749, -122.4194), '94099': (37.7749, -122.4194),
            
            # San Diego area
            '92007': (32.7157, -117.1611), '92008': (32.7157, -117.1611), '92009': (32.7157, -117.1611),
            '92010': (32.7157, -117.1611), '92011': (32.7157, -117.1611), '92013': (32.7157, -117.1611),
            '92014': (32.7157, -117.1611), '92015': (32.7157, -117.1611), '92016': (32.7157, -117.1611),
            '92017': (32.7157, -117.1611), '92018': (32.7157, -117.1611), '92019': (32.7157, -117.1611),
            '92020': (32.7157, -117.1611), '92021': (32.7157, -117.1611), '92022': (32.7157, -117.1611),
            '92023': (32.7157, -117.1611), '92024': (32.7157, -117.1611), '92025': (32.7157, -117.1611),
            '92026': (32.7157, -117.1611), '92027': (32.7157, -117.1611), '92028': (32.7157, -117.1611),
            '92029': (32.7157, -117.1611), '92030': (32.7157, -117.1611), '92031': (32.7157, -117.1611),
            '92032': (32.7157, -117.1611), '92033': (32.7157, -117.1611), '92034': (32.7157, -117.1611),
            '92035': (32.7157, -117.1611), '92036': (32.7157, -117.1611), '92037': (32.7157, -117.1611),
            '92038': (32.7157, -117.1611), '92039': (32.7157, -117.1611), '92040': (32.7157, -117.1611),
            '92041': (32.7157, -117.1611), '92042': (32.7157, -117.1611), '92043': (32.7157, -117.1611),
            '92044': (32.7157, -117.1611), '92045': (32.7157, -117.1611), '92046': (32.7157, -117.1611),
            '92047': (32.7157, -117.1611), '92048': (32.7157, -117.1611), '92049': (32.7157, -117.1611),
            '92050': (32.7157, -117.1611), '92051': (32.7157, -117.1611), '92052': (32.7157, -117.1611),
            '92053': (32.7157, -117.1611), '92054': (32.7157, -117.1611), '92055': (32.7157, -117.1611),
            '92056': (32.7157, -117.1611), '92057': (32.7157, -117.1611), '92058': (32.7157, -117.1611),
            '92059': (32.7157, -117.1611), '92060': (32.7157, -117.1611), '92061': (32.7157, -117.1611),
            '92062': (32.7157, -117.1611), '92063': (32.7157, -117.1611), '92064': (32.7157, -117.1611),
            '92065': (32.7157, -117.1611), '92066': (32.7157, -117.1611), '92067': (32.7157, -117.1611),
            '92068': (32.7157, -117.1611), '92069': (32.7157, -117.1611), '92070': (32.7157, -117.1611),
            '92071': (32.7157, -117.1611), '92072': (32.7157, -117.1611), '92073': (32.7157, -117.1611),
            '92074': (32.7157, -117.1611), '92075': (32.7157, -117.1611), '92076': (32.7157, -117.1611),
            '92077': (32.7157, -117.1611), '92078': (32.7157, -117.1611), '92079': (32.7157, -117.1611),
            '92080': (32.7157, -117.1611), '92081': (32.7157, -117.1611), '92082': (32.7157, -117.1611),
            '92083': (32.7157, -117.1611), '92084': (32.7157, -117.1611), '92085': (32.7157, -117.1611),
            '92086': (32.7157, -117.1611), '92087': (32.7157, -117.1611), '92088': (32.7157, -117.1611),
            '92089': (32.7157, -117.1611), '92090': (32.7157, -117.1611), '92091': (32.7157, -117.1611),
            '92092': (32.7157, -117.1611), '92093': (32.7157, -117.1611), '92094': (32.7157, -117.1611),
            '92095': (32.7157, -117.1611), '92096': (32.7157, -117.1611), '92097': (32.7157, -117.1611),
            '92098': (32.7157, -117.1611), '92099': (32.7157, -117.1611),
            
            # San Jose area
            '95002': (37.3382, -121.8863), '95003': (37.3382, -121.8863), '95004': (37.3382, -121.8863),
            '95005': (37.3382, -121.8863), '95006': (37.3382, -121.8863), '95007': (37.3382, -121.8863),
            '95008': (37.3382, -121.8863), '95009': (37.3382, -121.8863), '95010': (37.3382, -121.8863),
            '95011': (37.3382, -121.8863), '95012': (37.3382, -121.8863), '95013': (37.3382, -121.8863),
            '95014': (37.3382, -121.8863), '95015': (37.3382, -121.8863), '95016': (37.3382, -121.8863),
            '95017': (37.3382, -121.8863), '95018': (37.3382, -121.8863), '95019': (37.3382, -121.8863),
            '95020': (37.3382, -121.8863), '95021': (37.3382, -121.8863), '95022': (37.3382, -121.8863),
            '95023': (37.3382, -121.8863), '95024': (37.3382, -121.8863), '95025': (37.3382, -121.8863),
            '95026': (37.3382, -121.8863), '95027': (37.3382, -121.8863), '95028': (37.3382, -121.8863),
            '95029': (37.3382, -121.8863), '95030': (37.3382, -121.8863), '95031': (37.3382, -121.8863),
            '95032': (37.3382, -121.8863), '95033': (37.3382, -121.8863), '95034': (37.3382, -121.8863),
            '95035': (37.3382, -121.8863), '95036': (37.3382, -121.8863), '95037': (37.3382, -121.8863),
            '95038': (37.3382, -121.8863), '95039': (37.3382, -121.8863), '95040': (37.3382, -121.8863),
            '95041': (37.3382, -121.8863), '95042': (37.3382, -121.8863), '95043': (37.3382, -121.8863),
            '95044': (37.3382, -121.8863), '95045': (37.3382, -121.8863), '95046': (37.3382, -121.8863),
            '95047': (37.3382, -121.8863), '95048': (37.3382, -121.8863), '95049': (37.3382, -121.8863),
            '95050': (37.3382, -121.8863), '95051': (37.3382, -121.8863), '95052': (37.3382, -121.8863),
            '95053': (37.3382, -121.8863), '95054': (37.3382, -121.8863), '95055': (37.3382, -121.8863),
            '95056': (37.3382, -121.8863), '95057': (37.3382, -121.8863), '95058': (37.3382, -121.8863),
            '95059': (37.3382, -121.8863), '95060': (37.3382, -121.8863), '95061': (37.3382, -121.8863),
            '95062': (37.3382, -121.8863), '95063': (37.3382, -121.8863), '95064': (37.3382, -121.8863),
            '95065': (37.3382, -121.8863), '95066': (37.3382, -121.8863), '95067': (37.3382, -121.8863),
            '95068': (37.3382, -121.8863), '95069': (37.3382, -121.8863), '95070': (37.3382, -121.8863),
            '95071': (37.3382, -121.8863), '95072': (37.3382, -121.8863), '95073': (37.3382, -121.8863),
            '95074': (37.3382, -121.8863), '95075': (37.3382, -121.8863), '95076': (37.3382, -121.8863),
            '95077': (37.3382, -121.8863), '95078': (37.3382, -121.8863), '95079': (37.3382, -121.8863),
            '95080': (37.3382, -121.8863), '95081': (37.3382, -121.8863), '95082': (37.3382, -121.8863),
            '95083': (37.3382, -121.8863), '95084': (37.3382, -121.8863), '95085': (37.3382, -121.8863),
            '95086': (37.3382, -121.8863), '95087': (37.3382, -121.8863), '95088': (37.3382, -121.8863),
            '95089': (37.3382, -121.8863), '95090': (37.3382, -121.8863), '95091': (37.3382, -121.8863),
            '95092': (37.3382, -121.8863), '95093': (37.3382, -121.8863), '95094': (37.3382, -121.8863),
            '95095': (37.3382, -121.8863), '95096': (37.3382, -121.8863), '95097': (37.3382, -121.8863),
            '95098': (37.3382, -121.8863), '95099': (37.3382, -121.8863),
        }
        
        # Add more coordinates for other ZIP codes as needed
        self._generate_coordinates_for_ranges()
    
    def _generate_coordinates_for_ranges(self):
        """Generate coordinates for ZIP code ranges not explicitly defined."""
        # Add coordinates for common ZIP codes in the ranges
        for zip_code in range(90000, 97000):
            zip_str = f"{zip_code:05d}"
            
            if zip_str not in self.california_coordinates:
                # Assign approximate coordinates based on ZIP code ranges
                if 90000 <= zip_code <= 91999:  # Los Angeles area
                    self.california_coordinates[zip_str] = (34.0522, -118.2437)
                elif 92000 <= zip_code <= 92999:  # San Diego area
                    self.california_coordinates[zip_str] = (32.7157, -117.1611)
                elif 93000 <= zip_code <= 93999:  # Central Coast
                    self.california_coordinates[zip_str] = (34.4208, -119.6982)
                elif 94000 <= zip_code <= 94999:  # San Francisco Bay Area
                    self.california_coordinates[zip_str] = (37.7749, -122.4194)
                elif 95000 <= zip_code <= 95999:  # San Jose area
                    self.california_coordinates[zip_str] = (37.3382, -121.8863)
                elif 96000 <= zip_code <= 96999:  # Northern California
                    self.california_coordinates[zip_str] = (40.5865, -122.3917)
    
    def haversine_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """Calculate the great circle distance between two points on Earth."""
        from math import asin, cos, radians, sin, sqrt

        # Convert decimal degrees to radians
        lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
        
        # Haversine formula
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * asin(sqrt(a))
        
        # Radius of earth in miles
        r = 3956
        
        return c * r
    
    def estimate_travel_time(self, origin_zip: str, dest_zip: str) -> float:
        """Estimate travel time between two ZIP codes using distance and California geography."""
        # Get coordinates
        origin_coords = self.california_coordinates.get(str(origin_zip))
        dest_coords = self.california_coordinates.get(str(dest_zip))
        
        if not origin_coords or not dest_coords:
            logger.warning(f"Missing coordinates for {origin_zip} or {dest_zip}")
            return 180.0  # Fallback to maximum time
        
        # Calculate distance
        distance_miles = self.haversine_distance(
            origin_coords[0], origin_coords[1],
            dest_coords[0], dest_coords[1]
        )
        
        # Estimate travel time based on distance and California geography
        if distance_miles < 5:
            # Within same city - urban traffic
            avg_speed = 20  # mph in urban areas
        elif distance_miles < 25:
            # Metropolitan area - mixed traffic
            avg_speed = 35  # mph
        elif distance_miles < 100:
            # Regional travel - highway speeds
            avg_speed = 55  # mph
        else:
            # Long distance - interstate speeds
            avg_speed = 65  # mph
        
        # Calculate travel time in minutes
        travel_time = (distance_miles / avg_speed) * 60
        
        # Add traffic factor for California
        traffic_factor = 1.2  # 20% extra time for traffic
        
        # Add some randomness to make it more realistic
        noise = np.random.normal(0, 0.1)  # 10% standard deviation
        
        final_time = travel_time * traffic_factor * (1 + noise)
        
        # Ensure reasonable bounds
        final_time = max(5, min(180, final_time))  # Between 5 and 180 minutes
        
        return round(final_time, 1)
    
    def build_travel_matrix(self, provider_file: str = 'data/processed/ca_providers_filtered.csv',
                           demand_file: str = 'data/processed/ca_demand_filtered.csv') -> pd.DataFrame:
        """Build the complete travel time matrix for California providers and demand areas."""
        logger.info("Loading California provider and demand data...")
        
        # Load data
        providers = pd.read_csv(provider_file)
        demand = pd.read_csv(demand_file)
        
        logger.info(f"Building travel matrix for {len(providers)} providers and {len(demand)} demand areas...")
        
        # Create all provider-demand pairs
        matrix_data = []
        total_pairs = len(providers) * len(demand)
        
        for i, (_, provider) in enumerate(providers.iterrows()):
            for j, (_, demand_area) in enumerate(demand.iterrows()):
                if (i * len(demand) + j) % 10000 == 0:
                    logger.info(f"Processing pair {i * len(demand) + j + 1:,}/{total_pairs:,}")
                
                travel_time = self.estimate_travel_time(
                    provider['zip_code'], 
                    demand_area['zip_code']
                )
                
                matrix_data.append({
                    'zip_code': demand_area['zip_code'],
                    'provider_npi': provider['provider_npi'],
                    'drive_minutes': travel_time
                })
        
        # Create DataFrame
        travel_matrix = pd.DataFrame(matrix_data)
        
        logger.info(f"Travel matrix complete: {len(travel_matrix):,} pairs")
        logger.info(f"Travel time statistics:")
        logger.info(travel_matrix['drive_minutes'].describe())
        
        return travel_matrix
    
    def save_matrix(self, matrix: pd.DataFrame, output_file: str = 'data/processed/travel_matrix.parquet'):
        """Save the travel matrix to parquet format."""
        output_path = Path(output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        matrix.to_parquet(output_file, index=False)
        logger.info(f"Saved travel matrix to: {output_file}")
        
        # Create summary statistics
        summary = {
            'total_pairs': len(matrix),
            'providers_count': matrix['provider_npi'].nunique(),
            'demand_areas_count': matrix['zip_code'].nunique(),
            'mean_travel_time': float(matrix['drive_minutes'].mean()),
            'median_travel_time': float(matrix['drive_minutes'].median()),
            'min_travel_time': float(matrix['drive_minutes'].min()),
            'max_travel_time': float(matrix['drive_minutes'].max()),
            'california_only': True
        }
        
        summary_file = output_path.parent / 'travel_matrix_summary.json'
        with open(summary_file, 'w') as f:
            json.dump(summary, f, indent=2)
        logger.info(f"Saved summary to: {summary_file}")
        
        return summary

def main():
    """Main function to build California travel matrix."""
    logger.info("Starting California travel matrix generation...")
    
    builder = CaliforniaTravelMatrixBuilder()
    
    # Build travel matrix
    matrix = builder.build_travel_matrix()
    
    # Save matrix
    summary = builder.save_matrix(matrix)
    
    logger.info("California travel matrix generation complete!")
    logger.info(f"Summary: {summary}")
    
    return matrix, summary

if __name__ == "__main__":
    main() 